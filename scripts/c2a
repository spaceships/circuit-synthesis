#!/bin/bash
#
# Cryptol to acirc
#

set -e

optimize=1
ty="acirc"

usage () {
    echo "C2A: Cryptol to acirc through AND-inverter graphs" > /dev/stderr
    echo "Usage: $0 <cryptol-file> <function>" > /dev/stderr
    echo "Options:" > /dev/stderr
    echo "  -n        skip optimization step" > /dev/stderr
    echo "  -t TYPE   type of circuit to produce from cxs [default=$ty]" > /dev/stderr
    exit $1
}

while getopts "hnt:" opt; do
    case $opt in
        h) usage && exit 0;;
        n) optimize="";;
        t) ty=$OPTARG;;
        *) usage && exit 1;;
    esac
done

shift $((OPTIND-1))

if [ x$1 = x ] || [ x$2 = x ]; then
    usage 1
fi

if ! [ -f cxs ]; then
    echo "[c2a] ERROR: cxs not present! maybe you should run ./build_cxs.sh" >/dev/stderr
    exit 1
fi
cxs=$(readlink -f cxs)

num_test_cases=10

scriptdir=$(dirname $(readlink -f "${BASH_SOURCE[0]}"))
dir=$(pwd)

cryptolfile=$(realpath $1)
func=$2
testfile=${2}_tests.cry

tmp=$(mktemp -d)
cd $tmp

cat > sawcmds.saw <<- EOM
m <- cryptol_load "$cryptolfile";
f <- cryptol_extract m "$func";
write_aig "${func}.aig" f;
EOM

if [ "$optimize" ]; then 
cat > abccmds.abc <<- EOM
read "${func}.aig"
strash
multi
fraig
rewrite -l
balance -s -d -x
write "${func}.bench"
EOM
else
cat > abccmds.abc <<- EOM
read "${func}.aig"
write "${func}.bench"
EOM
fi

sizes=($(egrep "^$func\\s*:\\s*" $cryptolfile | perl -ne \
    'if (/: \(\[(\d+)],\s*\[(\d+)\]\) ->/) { print "$1 $2"; } elsif (/: \[(\d+)\] ->/) { print "$1 0"; }' \
))
xsize=${sizes[0]}
ysize=${sizes[1]}

fixed_input=""
for i in $(seq $xsize $((xsize + ysize - 1))); do
    fixed_input+=" $i:0"
done

saw sawcmds.saw
abc -f abccmds.abc
$cxs read $func.bench -o $dir/$func.c2a.$ty -k "$fixed_input"
