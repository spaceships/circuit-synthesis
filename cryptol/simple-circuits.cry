add_2 : [2] -> [2]
add_2 x = (zero # (take x : [1])) + (zero # (drop x : [1]))

cmul_16 : [15] -> [16]
cmul_16 x = (zero # x) * 0x6FF4

cmul_32 : [31] -> [32]
cmul_32 x = (zero # x) * 0x72c701f4

cmul_64 : [63] -> [64]
cmul_64 x = (zero # x) * 0x4edd585158f9ec64

cexp_16 : [4] -> [16]
cexp_16 x = (zero # x) ^^ 4

cexp_32 : [6] -> [32]
cexp_32 x = (zero # x) ^^ 5

cexp_64 : [8] -> [64]
cexp_64 x = (zero # x) ^^ 8

mul_4 : ([4], [4]) -> [4]
mul_4 (x,y) = x * y

mul_16 : ([8], [8]) -> [16]
mul_16 (x, y) = (zero # x) * (zero # y)

mul_32 : ([16], [16]) -> [32]
mul_32 (x, y) = (zero # x) * (zero # y)

mul_64 : ([32], [32]) -> [64]
mul_64 (x, y) = (zero # x) * (zero # y)

foldl : {n, a, b} (fin n ) => (a -> b -> b) -> b -> [n]a -> b
foldl f z0 xs = res ! 0
  where
    res = [z0] # [ f x z | z <- res | x <- xs ]

sum : {n, a} (fin n, fin a) => [n][a] -> [a]
sum = foldl (+) 0

maj_10 : [10] -> Bit
maj_10 x = sum [ if b then (1 : [4]) else 0 | b <- x ] > 5

maj_100 : [100] -> Bit
maj_100 x = sum [ if b then (1 : [8]) else 0 | b <- x ] > 50

maj_1000 : [1000] -> Bit
maj_1000 x = sum [ if b then (1 : [16]) else 0 | b <- x ] > 500

add_4 : ([4], [4]) -> [4]
add_4 (x,y) = x + y

add_8 : ([8], [8]) -> [8]
add_8 (x,y) = x + y

add_16 : ([16], [16]) -> [16]
add_16 (x,y) = x + y

eq_8 : ([16], [0]) -> Bit
eq_8 (xs, y) = take `{8} xs == drop `{8} xs

mod_16 : ([32], [0]) -> [16]
mod_16 (inps, _) = x % y
  where
    [x,y] = split inps

mod_32 : ([64], [0]) -> [32]
mod_32 (inps, _) = x % y
  where
    [x,y] = split inps

mod_64 : ([128], [0]) -> [64]
mod_64 (inps, _) = x % y
  where
    [x,y] = split inps

mod_4096 : ([8192], [0]) -> [4096]
mod_4096 (inps, _) = x % y
  where
    [x,y] = split inps
